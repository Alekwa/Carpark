import time
import mysql.connector
import datetime

# Establish a connection to the MySQL database(s)
db_connection = mysql.connector.connect(
    host="localhost",
    user="Alekwa",
    password="root",
    database="school_project"
)
db_cursor = db_connection.cursor()

MAX_CAPACITY = 100

def register_vehicle():
    registration_number = input("\nEnter the vehicle registration number: \n")
    first_name = input("\nEnter the first name of the Car owner: \n")
    last_name = input("\nEnter the last name of the Car owner: \n")
    time_in = time.strftime("%Y-%m-%d %H:%M:%S")

    # Check if the customer already exists
    query_check_customer = "SELECT CustomerID FROM Customers WHERE First_Name = %s AND Last_Name = %s"
    values_check_customer = (first_name, last_name)

    db_cursor.execute(query_check_customer, values_check_customer)
    existing_customer = db_cursor.fetchone()

    if existing_customer:
        customer_id = existing_customer[0]
    else:
        # Insert into Customers table
        try:
            query_insert_customer = "INSERT INTO Customers (First_Name, Last_Name) VALUES (%s, %s)"
            values_insert_customer = (first_name, last_name)
            db_cursor.execute(query_insert_customer, values_insert_customer)
            db_connection.commit()
            customer_id = db_cursor.lastrowid
        except mysql.connector.Error as e:
            print("MySQL Error:", e)
            db_connection.rollback()

    # Find an available parking space
    space_number = find_available_parking_space()

    if space_number is not None:
        # Insert into ParkingRecords_ table with assigned SpaceNumber
        try:
            query_insert_parking = "INSERT INTO ParkingRecords_ (RegistrationNumber, CustomerID, TimeIn, Status, SpaceNumber) VALUES (%s, %s, %s, 'Occupied', %s)"
            values_insert_parking = (registration_number, customer_id, time_in, space_number)
            db_cursor.execute(query_insert_parking, values_insert_parking)
            db_connection.commit()
            print("\nVehicle registered successfully. Parking space assigned: {}\n".format(space_number))
        except mysql.connector.Error as e:
            print("MySQL Error:", e)
            db_connection.rollback()
    else:
        print("No available parking spaces. Please try again.")
        time.sleep(3)

def find_available_parking_space():
    # Find an available parking space within the maximum capacity
    query_available_space = "SELECT MIN(SpaceNumber) FROM ParkingRecords_ WHERE Status = 'Free' AND RegistrationNumber IS NULL"

    db_cursor.execute(query_available_space)
    available_space = db_cursor.fetchone()

    if available_space and available_space[0] is not None:
        return available_space[0]
    else:
        # If no available space found, check the next unoccupied space
        query_next_unoccupied_space = "SELECT MAX(SpaceNumber) + 1 FROM ParkingRecords_"
        db_cursor.execute(query_next_unoccupied_space)
        next_unoccupied_space = db_cursor.fetchone()

        if next_unoccupied_space and next_unoccupied_space[0] is not None and next_unoccupied_space[0] <= MAX_CAPACITY:
            return next_unoccupied_space[0]
        else:
            return None

def release_vehicle():
    registration_number = input("\nEnter the vehicle registration number: \n")
    time_out = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # Check if the vehicle exists and calculate the parking fee
    query = "SELECT CustomerID, TimeIn, SpaceNumber FROM ParkingRecords_ WHERE RegistrationNumber = %s"
    values = (registration_number,)

    # Reconnect the cursor if it's disconnected
    if not db_connection.is_connected():
        db_connection.reconnect()

    db_cursor.execute(query, values)
    record = db_cursor.fetchone()

    if record:
        customer_id, time_in, space_number = record
        time_difference = (datetime.datetime.strptime(time_out, "%Y-%m-%d %H:%M:%S") - time_in).total_seconds()
        parking_fee = time_difference * 1

        # Update ParkingRecords
        try:
            query_update_parking = "UPDATE ParkingRecords_ SET TimeOut = %s, Fee = %s, Status = 'Free' WHERE RegistrationNumber = %s"
            values_update_parking = (time_out, parking_fee, registration_number)
            db_cursor.execute(query_update_parking, values_update_parking)
            db_connection.commit()
            print("\nParking fee: KES {}.".format(parking_fee))
        except mysql.connector.Error as e:
            print("MySQL Error:", e)
            db_connection.rollback()
    else:
        print("\nVehicle not found.\n")
        time.sleep(3)


        # check parked vehicles

def check_vehicle():
    registration_number = input("\nEnter the vehicle registration number: \n")

    # Query the database to get vehicle details
    query = """
    SELECT c.First_Name, c.Last_Name, pr.TimeIn, pr.TimeOut, pr.Fee, pr.SpaceNumber
    FROM Customers c
    LEFT JOIN ParkingRecords_ pr ON c.CustomerID = pr.CustomerID
    WHERE pr.RegistrationNumber = %s
    """
    values = (registration_number,)

    db_cursor.execute(query, values)
    vehicle_info = db_cursor.fetchone()

    if vehicle_info:
        first_name, last_name, time_in, time_out, parking_fee, space_number = vehicle_info
        print("\nVehicle found.\n")
        print("Details:")
        print("  First Name of Owner: {}".format(first_name))
        print("  Last Name of Owner: {}".format(last_name))
        print("  Registration number: {}".format(registration_number))
        print("  Time in: {}".format(time_in))

        if time_out is not None and parking_fee is not None:
            print("  Time out: {}".format(time_out))
            print("  Parking fee: KES {}".format(parking_fee))
        else:
            print("  Time out: Not yet released")
            print("  Parking fee: Not yet charged")
        
        if space_number is not None:
            print("  Parking space occupied: {}".format(space_number))

        time.sleep(5)
    else:
        print("\nVehicle not found.\n")
        time.sleep(3)


def book_parking_space():
    first_name = input("\nEnter your first name: \n")
    last_name = input("\nEnter your last name: \n")
    registration_number = input("\nEnter the vehicle registration number: \n")

    # Check if the customer already exists
    query_check_customer = "SELECT CustomerID FROM Customers WHERE First_Name = %s AND Last_Name = %s"
    values_check_customer = (first_name, last_name)

    db_cursor.execute(query_check_customer, values_check_customer)
    existing_customer = db_cursor.fetchone()

    if existing_customer:
        customer_id = existing_customer[0]
    else:
        # Insert into Customers table
        try:
            query_insert_customer = "INSERT INTO Customers (First_Name, Last_Name) VALUES (%s, %s)"
            values_insert_customer = (first_name, last_name)
            db_cursor.execute(query_insert_customer, values_insert_customer)
            db_connection.commit()
            customer_id = db_cursor.lastrowid
        except mysql.connector.Error as e:
            print("MySQL Error:", e)
            db_connection.rollback()

    # Check if the car is not already booked or occupied
    query_check_car_status = "SELECT Status FROM ParkingRecords_ WHERE RegistrationNumber = %s AND (Status = 'Booked' OR Status = 'Occupied')"
    values_check_car_status = (registration_number,)

    db_cursor.execute(query_check_car_status, values_check_car_status)
    existing_status = db_cursor.fetchone()

    if existing_status:
        print("Error: This car is already booked or occupying a space. Cannot proceed with booking.")
        return

    # Find an available parking space for booking
    space_number = find_available_parking_space()

    if space_number is not None:
        # Insert into ParkingRecords_ table with assigned SpaceNumber and 'Booked' status
        try:
            query_insert_booking = "INSERT INTO ParkingRecords_ (RegistrationNumber, CustomerID, TimeIn, Status, SpaceNumber) VALUES (%s, %s, %s, 'Booked', %s)"
            values_insert_booking = (registration_number, customer_id, time.strftime("%Y-%m-%d %H:%M:%S"), space_number)
            db_cursor.execute(query_insert_booking, values_insert_booking)
            db_connection.commit()
            print("\nBooking successful. Parking space {} assigned. Please finish your booking when you arrive at the parking area.\n".format(space_number))
        except mysql.connector.Error as e:
            print("MySQL Error:", e)
            db_connection.rollback()
    else:
        print("No available parking spaces for booking. Please try again later.")
        time.sleep(3)


def finish_booking():
    space_number = input("\nEnter the parking space number: \n")

    # Update the status to 'Occupied' for the specified parking space
    query_finish_booking = "UPDATE ParkingRecords_ SET Status = 'Occupied' WHERE SpaceNumber = %s AND Status = 'Booked'"
    values_finish_booking = (space_number,)

    try:
        db_cursor.execute(query_finish_booking, values_finish_booking)
        db_connection.commit()
        print("\nBooking finished successfully. Parking space {} marked as occupied.\n".format(space_number))
    except mysql.connector.Error as e:
        print("MySQL Error:", e)
        db_connection.rollback()


def display_customer_information():
    try:
        query = """
        SELECT c.CustomerID, CONCAT(c.First_Name, ' ', c.Last_Name) AS FullName,
               pr.RegistrationNumber, pr.SpaceNumber, pr.TimeIn, pr.TimeOut
        FROM Customers c
        JOIN ParkingRecords_ pr ON c.CustomerID = pr.CustomerID
        """
        db_cursor.execute(query)
        customer_info = db_cursor.fetchall()

        if customer_info:
            print("Customer Information:")

            for row in customer_info:
                customer_id, full_name, registration_number, space_number, time_in, time_out = row
                print("Customer ID: {}".format(customer_id))
                print("Full Name: {}".format(full_name))
                print("Registration number: {}".format(registration_number))
                if space_number is not None:
                    print("Parking space occupied: {}".format(space_number))
                if time_in is not None:
                    print("Time In: {}".format(time_in))
                if time_out is not None:
                    print("Time Out: {}".format(time_out))
                print("-" * 20)
        else:
            print("No customer information found.")

    except mysql.connector.Error as e:
        print("MySQL Error:", e)



def main():
    while True:
        print("Choose one of the following options:")
        print("\n1. Register vehicle\n")
        print("\n2. Release vehicle\n")
        print("\n3. Check vehicle\n")
        print("\n4. Book parking space\n")
        print("\n5. Finish booking\n")
        print("\n6. Display Registered Customers Information\n")
        print("\n7. Exit\n")
        option = input("\nEnter your choice: \n")

        if option == "1":
            register_vehicle()
        elif option == "2":
            release_vehicle()
        elif option == "3":
            check_vehicle()
        elif option == "4":
            book_parking_space()
        elif option == "5":
            finish_booking()
        elif option == "6":
            display_customer_information()
        elif option == "7":
            print("\n./././././Exiting./././././\n")
            time.sleep(2)
            break
        else:
            print("Invalid option :(")

    db_cursor.close()
    db_connection.close()

if __name__ == "__main__":
    main()
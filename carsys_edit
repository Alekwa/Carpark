import time
import mysql.connector
import datetime

# Establish a connection to the MySQL database(s)
db_connection = mysql.connector.connect(
    host="localhost",
    user="Alekwa",
    password="root",
    database="school_project"
)
db_cursor = db_connection.cursor()

MAX_CAPACITY = 100

def register_vehicle():
    registration_number = input("\nEnter the vehicle registration number: \n")
    first_name = input("\nEnter the first name of the Car owner: \n")
    last_name = input("\nEnter the last name of the Car owner: \n")
    time_in = time.strftime("%Y-%m-%d %H:%M:%S")

    # Insert into Customers table
    try:
        query_insert_customer = "INSERT INTO Customers (First_Name, Last_Name) VALUES (%s, %s)"
        values_insert_customer = (first_name, last_name)
        db_cursor.execute(query_insert_customer, values_insert_customer)
        db_connection.commit()
    except mysql.connector.Error as e:
        print("MySQL Error:", e)
        db_connection.rollback()

    # Find an available parking space
    space_number = find_available_parking_space()

    if space_number is not None:
        # Insert into ParkingRecords_ table with assigned SpaceNumber
        try:
            query_insert_parking = "INSERT INTO ParkingRecords_ (RegistrationNumber, CustomerID, TimeIn, Status, SpaceNumber) VALUES (%s, LAST_INSERT_ID(), %s, 'Occupied', %s)"
            values_insert_parking = (registration_number, time_in, space_number)
            db_cursor.execute(query_insert_parking, values_insert_parking)
            db_connection.commit()
            print("\nVehicle registered successfully. Parking space assigned: {}\n".format(space_number))
        except mysql.connector.Error as e:
            print("MySQL Error:", e)
            db_connection.rollback()
    else:
        print("No available parking spaces. Please try again.")
        time.sleep(3)

def find_available_parking_space():
    # Find an available parking space within the maximum capacity
    query_available_space = "SELECT SpaceNumber FROM ParkingRecords_ WHERE Status = 'Free' AND RegistrationNumber IS NULL ORDER BY SpaceNumber ASC LIMIT 1"

    db_cursor.execute(query_available_space)
    occupied_spaces = set(row[0] for row in db_cursor.fetchall())

    for space_number in range(1, MAX_CAPACITY + 1):
        if space_number not in occupied_spaces:
            return space_number

    return None

def release_vehicle():
    registration_number = input("\nEnter the vehicle registration number: \n")
    time_out = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # Check if the vehicle exists and calculate the parking fee
    query = "SELECT CustomerID, TimeIn, SpaceNumber FROM ParkingRecords_ WHERE RegistrationNumber = %s"
    values = (registration_number,)

    # Reconnect the cursor if it's disconnected
    if not db_connection.is_connected():
        db_connection.reconnect()

    db_cursor.execute(query, values)
    record = db_cursor.fetchone()

    if record:
        customer_id, time_in, space_number = record
        time_difference = (datetime.datetime.strptime(time_out, "%Y-%m-%d %H:%M:%S") - time_in).total_seconds()
        parking_fee = time_difference * 1

        # Update ParkingRecords
        try:
            query = "UPDATE ParkingRecords_ SET TimeOut = %s, Fee = %s WHERE RegistrationNumber = %s"
            values = (time_out, parking_fee, registration_number)
            db_cursor.execute(query, values)
            db_connection.commit()
            print("\nParking fee: KES {}.".format(parking_fee))
        except mysql.connector.Error as e:
            print("MySQL Error:", e)
            db_connection.rollback()
    else:
        print("\nVehicle not found.\n")
        time.sleep(3)

        # check parked vehicles

def check_vehicle():
    registration_number = input("\nEnter the vehicle registration number: \n")

    # Query the database to get vehicle details
    query = """
    SELECT c.First_Name, c.Last_Name, pr.TimeIn, pr.TimeOut, pr.Fee, pr.SpaceNumber
    FROM Customers c
    LEFT JOIN ParkingRecords_ pr ON c.CustomerID = pr.CustomerID
    WHERE pr.RegistrationNumber = %s
    """
    values = (registration_number,)

    db_cursor.execute(query, values)
    vehicle_info = db_cursor.fetchone()

    if vehicle_info:
        first_name, last_name, time_in, time_out, parking_fee, space_number = vehicle_info
        print("\nVehicle found.\n")
        print("Details:")
        print("  First Name of Owner: {}".format(first_name))
        print("  Last Name of Owner: {}".format(last_name))
        print("  Registration number: {}".format(registration_number))
        print("  Time in: {}".format(time_in))

        if time_out is not None and parking_fee is not None:
            print("  Time out: {}".format(time_out))
            print("  Parking fee: KES {}".format(parking_fee))
        else:
            print("  Time out: Not yet released")
            print("  Parking fee: Not yet charged")
        
        if space_number is not None:
            print("  Parking space occupied: {}".format(space_number))

        time.sleep(5)
    else:
        print("\nVehicle not found.\n")
        time.sleep(3)

def display_customer_information():
    try:
        query = """
        SELECT c.CustomerID, c.First_Name, c.Last_Name, pr.RegistrationNumber, pr.SpaceNumber
        FROM Customers c
        JOIN ParkingRecords_ pr ON c.CustomerID = pr.CustomerID
        """
        db_cursor.execute(query)
        customer_info = db_cursor.fetchall()

        if customer_info:
            print("Customer Information:")

            for row in customer_info:
                customer_id, first_name, last_name, registration_number, space_number = row
                print("Customer ID: {}".format(customer_id))
                print("First Name of Owner: {}".format(first_name))
                print("Last Name of Owner: {}".format(last_name))
                print("Registration number: {}".format(registration_number))
                if space_number is not None:
                    print("Parking space occupied: {}".format(space_number))
                print("-" * 20)
        else:
            print("No customer information found.")

    except mysql.connector.Error as e:
        print("MySQL Error:", e)

def main():
    while True:
        print("Choose one of the following options:")
        print("\n1. Register vehicle\n")
        print("\n2. Release vehicle\n")
        print("\n3. Check vehicle\n")
        print("\n5. Display Registered Customers Information\n")
        print("\n6. Exit\n")
        option = input("\nEnter your choice: \n")

        if option == "1":
            register_vehicle()
        elif option == "2":
            release_vehicle()
        elif option == "3":
            check_vehicle()
        elif option == "5":
            display_customer_information()
        elif option == "6":
            print("\n./././././Exiting./././././\n")
            time.sleep(2)
            break
        else:
            print("Invalid option :(")

    db_cursor.close()
    db_connection.close()

if __name__ == "__main__":
    main()
